/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.9
 * Generated at: 2014-07-25 21:39:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.ResultSet;
import com.itrium.borey.client.*;

public final class status_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');
 
	Object userObj = session.getAttribute("user");
    if (userObj == null) {
        response.sendRedirect("index.jsp");
        return;
    }
    int user = (int) userObj;
    String email = (String) session.getAttribute("email");

    String requestUrl = "http://localhost:8080/Client/GetControllers";

    ControllerParams[] statuses = Controllers.getControllers(user, response.getWriter());
    if (statuses == null) {
        
      out.write("\n");
      out.write("            <h3>Statuses error</h3>\n");
      out.write("          \n");
      out.write("        ");

        return;
    }

      out.write(" \n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("<title>Information about your controllers.</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<h3>Information about your controllers.</h3>\n");
      out.write("\n");
      out.write("<p>\n");
      out.write("User: <strong> ");
      out.print( email );
      out.write("</strong> <br>\n");
      out.write("<a href=\"LogOut\">Log out</a>\n");
      out.write("</p>\n");
      out.write("\n");
 
    for(int i = 0; i < statuses.length; i++) {
        String id = statuses[i].key;
        String time = statuses[i].time;
        String status = statuses[i].status;
        String color = "";

        switch (status) {
            case "NORMAL":
                color = "green";
                break;
            case "DISARM":
                color = "black";
                break;
            case "BREAK":
                color = "red";
                break;
            case "ALARM":
                color = "red";
                break;
            case "PART":
                color = "yellow";
                break;
        }


      out.write("  \n");
      out.write("        <p>\n");
      out.write("        Controller ID: <strong id=\"");
      out.print( "id" + i  );
      out.write('"');
      out.write('>');
      out.print( id );
      out.write("</strong><br>\n");
      out.write("        Last connection: <strong id=\"");
      out.print( "time" + i  );
      out.write('"');
      out.write('>');
      out.print( time );
      out.write("</strong><br>\n");
      out.write("        Status: <strong id=\"");
      out.print( "status" + i  );
      out.write("\"><font color=\"");
      out.print( color );
      out.write('"');
      out.write('>');
      out.print( status );
      out.write("</font></strong><br>\n");
      out.write("        <a href=\"hystory.jsp?key=");
      out.print( id );
      out.write("\">Hystory</a>\n");
      out.write("        </p>\n");

    }

      out.write("\n");
      out.write("\n");
      out.write("<p>\n");
      out.write("    <a href=\"addcontroller.jsp\">Add controller</a>\n");
      out.write("</p>\n");
      out.write("\n");
 
    // TODO: Locate JavaScript in file.

      out.write("\n");
      out.write("<script>\n");
      out.write("\n");
      out.write("var xmlhttp;\n");
      out.write("function loadXMLDoc(url, cfunc) {\n");
      out.write("    if (window.XMLHttpRequest) {\n");
      out.write("      xmlhttp = new XMLHttpRequest();\n");
      out.write("    } else {\n");
      out.write("      xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n");
      out.write("    }\n");
      out.write("    xmlhttp.onreadystatechange = cfunc;\n");
      out.write("    xmlhttp.open(\"GET\", url, true);\n");
      out.write("    xmlhttp.send();\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("var myVar = setInterval(timer, 1000);\n");
      out.write("\n");
      out.write("function timer() {\n");
      out.write("    if (xmlhttp != undefined && xmlhttp.readyState != 4) {\n");
      out.write("        return;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    loadXMLDoc(\"");
      out.print( requestUrl );
      out.write("\", update);\n");
      out.write("}\n");
      out.write("\n");
      out.write("var updateParams = [\"id\", \"time\", \"status\"];\n");
      out.write("\n");
      out.write("function update() {\n");
      out.write("    if (xmlhttp.readyState != 4 || xmlhttp.status != 200) {\n");
      out.write("        return;\n");
      out.write("    }\n");
      out.write("    var statuses = parseRequest(xmlhttp.responseText);\n");
      out.write("    for (var i = 0; i < \"");
      out.print( statuses.length );
      out.write("\"; i++) {\n");
      out.write("        for (var j = 0; j < updateParams.length; j++) {\n");
      out.write("            switch (updateParams[j]) {\n");
      out.write("                case \"status\":\n");
      out.write("\n");
      out.write("                    var color = \"\";\n");
      out.write("                    var status = statuses[updateParams[j] + i];\n");
      out.write("                    switch (status) {\n");
      out.write("                        case \"NORMAL\":\n");
      out.write("                            color = \"green\";\n");
      out.write("                            break;\n");
      out.write("                        case \"DISARM\":\n");
      out.write("                            color = \"black\";\n");
      out.write("                            break;\n");
      out.write("                        case \"BREAK\":\n");
      out.write("                            color = \"red\";\n");
      out.write("                            break;\n");
      out.write("                        case \"ALARM\":\n");
      out.write("                            color = \"red\";\n");
      out.write("                            break;\n");
      out.write("                        case \"PART\":\n");
      out.write("                            color = \"yellow\";\n");
      out.write("                            break;\n");
      out.write("                    }\n");
      out.write("                    document.getElementById(updateParams[j] + i).innerHTML = '<font color=\"' + color + '\">' + status + '</font>';\n");
      out.write("                    break;\n");
      out.write("                default:\n");
      out.write("                    document.getElementById(updateParams[j] + i).innerHTML = statuses[updateParams[j] + i];\n");
      out.write("                    break;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("function parseRequest(str) {\n");
      out.write("    var res = [];\n");
      out.write("    var preRes = str.split(\"&\");\n");
      out.write("    for (var i = 0; i < preRes.length; i++) {\n");
      out.write("        temp = preRes[i].split(\"=\");\n");
      out.write("        res[temp[0]] = temp[1];\n");
      out.write("    }\n");
      out.write("    return res;\n");
      out.write("}\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
